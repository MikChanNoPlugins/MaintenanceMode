plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id 'org.jetbrains.dokka' version "1.7.10"
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

static def determineVersion(String defaultVersion) {
    def envVersion = System.getenv("VERSION")
    return envVersion == null ? defaultVersion : envVersion
}

group = "dev.mikchan.mcnp"
version = determineVersion("1.0.0")

def localProperties = new Properties()
def propertiesFile = rootProject.file('local.properties')
if (propertiesFile.exists()) {
    localProperties.load(new FileInputStream(propertiesFile))
}

repositories {
    mavenCentral()

    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }

    maven {
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10'
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'

    compileOnly 'me.clip:placeholderapi:2.11.2'

    implementation "org.bstats:bstats-bukkit:3.0.0"
    shadow "org.bstats:bstats-bukkit:3.0.0"

    implementation "org.bstats:bstats-bukkit:3.0.0"
    shadow "org.bstats:bstats-base:3.0.0"
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dokkaHtml {
    outputDirectory.set(file("${buildDir}/dokka"))
}

javadocJar {
    archiveClassifier.set("javadoc")
    dependsOn("dokkaHtml")
    from("$buildDir/dokka")
}

shadowJar {
    archiveClassifier.set(null)

    dependencies {
        include(dependency('org.bstats:bstats-bukkit'))
        include(dependency('org.bstats:bstats-base'))
    }

    relocate "org.bstats", "dev.mikchan.mcnp.maintenance.bstats"
}

publishing {
    repositories {
        maven {
            name = "GitHub"
            url = "https://maven.pkg.github.com/MikChanNoPlugins/MaintenanceMode"
            credentials {
                username = localProperties['user'] ?: System.getenv("GITHUB_ACTOR")
                password = localProperties['key'] ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            groupId = group
            artifactId = 'maintenance'

            artifact jar
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

if (file("local.gradle").exists()) {
    apply from: "local.gradle"
}
